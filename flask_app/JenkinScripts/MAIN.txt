#!/bin/bash

# Check if virtual environment exists, if not, create it
cd flask_app
python -m venv .venv


# Activating virtual environment
source .venv/bin/activate

# Install dependencies
pip install -r requirements.txt

export PYTHONPATH=/var/lib/jenkins/workspace/react_flask/flask_app/:$PYTHONPATH

check_and_create_directory() {
    if [ ! -d "$1" ]; then
        sudo mkdir -p "$1"
    fi
}
check_and_create_directory "/var/www"
check_and_create_directory "/var/www/html"
check_and_create_directory "/var/www/html/react_app"

check_and_create_directory "/var/log"
check_and_create_directory "/var/log/gunicorn"
sudo chown jenkins:jenkins /var/log/gunicorn
sudo chown -R ec2-user:ec2-user /var/log/gunicorn

# Check if Gunicorn is running, if so, stop and start it again
if pgrep gunicorn; then
    lsof -ti:8000 | xargs kill -9
fi
# DATABASE CONNECTIVITY
curl https://packages.microsoft.com/config/rhel/9/prod.repo | sudo tee /etc/yum.repos.d/mssql-release.repo

sudo ACCEPT_EULA=Y yum install -y msodbcsql18

sudo yum install -y unixODBC-devel

# INSTALL NODE
curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.5/install.sh | bash
. ~/.nvm/nvm.sh
nvm install 20.11.0

# Define the content of the service file
SERVICE_FILE_CONTENT="[Unit]
Description=Gunicorn instance to serve Flask application
After=network.target

[Service]
User=ec2-user
Group=ec2-user
WorkingDirectory=/var/lib/jenkins/workspace/react_flask/flask_app/
ExecStart=/var/lib/jenkins/workspace/react_flask/flask_app/.venv/bin/gunicorn -w 4 -b 0.0.0.0:8000 main:app --error-logfile /var/log/gunicorn/error.log --access-logfile /var/log/gunicorn/access.log

[Install]
WantedBy=multi-user.target"

# Echo the content into the service file
echo "$SERVICE_FILE_CONTENT" | sudo tee /etc/systemd/system/flask_trading.service > /dev/null

# Reload systemd to apply changes
sudo systemctl daemon-reload

# Check the status of flask_trading service
if sudo systemctl is-active --quiet flask_trading; then
    sudo systemctl restart flask_trading
else
    sudo systemctl start flask_trading
fi

# Install Nginx if not installed
if ! command -v nginx &> /dev/null; then
    sudo yum install -y nginx
fi

# Check if Nginx is running, if so, stop and start it again
if pgrep nginx; then
    sudo systemctl stop nginx
fi

# Start Nginx if it's not active
if sudo systemctl is-active --quiet nginx; then
    sudo systemctl restart nginx
else
    sudo systemctl start nginx
fi

# Enable Nginx to start on boot
sudo systemctl enable nginx


cd /var/lib/jenkins/workspace/react_flask/react_ui/
npm install react-scripts --save
npm run build
sudo cp -R /var/lib/jenkins/workspace/react_flask/react_ui/build/ /var/www/html/react_app/

# Define the content for the NGINX configuration file
NGINX_CONFIG_CONTENT=$(cat << 'EOF'
# For more information on configuration, see:
#   * Official English Documentation: http://nginx.org/en/docs/
#   * Official Russian Documentation: http://nginx.org/ru/docs/

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log notice;
pid /run/nginx.pid;

# Load dynamic modules. See /usr/share/doc/nginx/README.dynamic.
include /usr/share/nginx/modules/*.conf;

events {
    worker_connections 1024;
}

http {
	log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile            on;
    tcp_nopush          on;
    keepalive_timeout   65;
    types_hash_max_size 4096;

    include             /etc/nginx/mime.types;
    default_type        application/octet-stream;

    # Load modular configuration files from the /etc/nginx/conf.d directory.
    # See http://nginx.org/en/docs/ngx_core_module.html#include
    # for more information.
    include /etc/nginx/conf.d/*.conf;
    server {
        listen 80;
        server_name 54.197.216.145; # Use your server's IP or domain

        # Serve the React app
        location / {
            root /var/www/html/react_app/build;
            try_files $uri /index.html;
        }

        # Proxy requests for /home to another service
        location /home {
            proxy_pass http://127.0.0.1:8000; 
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
        location /get_chart_pattern {
            proxy_pass http://127.0.0.1:8000; 
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
        location /get_execution_result {
            proxy_pass http://127.0.0.1:8000; 
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
        location /upload_option_params {
            proxy_pass http://127.0.0.1:8000; # No trailing slash here
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
        location /summary_table_data {
            proxy_pass http://127.0.0.1:8000; # No trailing slash here
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
        location /compare_table_data {
            proxy_pass http://127.0.0.1:8000; # No trailing slash here
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
	location /get_option_parameters {
            proxy_pass http://127.0.0.1:8000; # No trailing slash here
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
    }
#    server {
#        listen       80;
#        listen       [::]:80;
#        server_name  _;
#        root         /usr/share/nginx/html;
#
        # Load configuration files for the default server block.
#        include /etc/nginx/default.d/*.conf;

#        error_page 404 /404.html;
#        location = /404.html {
#        }

#        error_page 500 502 503 504 /50x.html;
#        location = /50x.html {
#       }
#    }


# Settings for a TLS enabled server.
#
#    server {
#        listen       443 ssl http2;
#        listen       [::]:443 ssl http2;
#        server_name  _;
#        root         /usr/share/nginx/html;
#
#        ssl_certificate /etc/pki/nginx/server.crt;
#        ssl_certificate_key /etc/pki/nginx/private/server.key;
#        ssl_session_cache shared:SSL:1m;
#        ssl_session_timeout  10m;
#        ssl_ciphers PROFILE=SYSTEM;
#        ssl_prefer_server_ciphers on;
#
#        # Load configuration files for the default server block.
#        include /etc/nginx/default.d/*.conf;
#
#        error_page 404 /404.html;
#        location = /404.html {
#        }
#
#        error_page 500 502 503 504 /50x.html;
#        location = /50x.html {
#        }
#    }

}
EOF
)

# Clear the NGINX configuration file
echo "$NGINX_CONFIG_CONTENT" | sudo tee /etc/nginx/nginx.conf > /dev/null

# Restart Nginx to apply the new configuration
sudo systemctl restart nginx

# sudo sync && echo 3 | sudo tee /proc/sys/vm/drop_caches
